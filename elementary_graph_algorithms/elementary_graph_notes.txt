*************************************************
Elementary Graphs
*************************************************
- This chapter presents methods for representing a graph and for searching a graph.

    Review: 
        - Remember how a graph in graph theory works.
        - A graph is typically represented with circles and lines which connect these circles. Circles are formally called vertices, and lines are called edges. 
        - Data can be tacked on to these vertices and edges to make things more interesting.

- Searching a graph means systematically following the edges of the graph so as to visit the vertices of the graph.


- Refer to my notes on graph representations on computers (since I can't draw here).

- Given graph G = (V, E)
    G: graph
    V: set of vertices
    E: set of edges
    Adj: array of |V| lists
        - For each u in V, the adjacency list Adj[u] contains all the vertices v such that there is an edge (u, v) in E (it contains all the vertices adjacent to u).
        - In the transpose procedure below, Adj[u] contains pointers to the vertices to make implemenatation easier.
    n: number of indices in Adj

- Use a node structure to hold the linked list implemenatation for the adjacency 

                
transpose pseudo code
-------------------------------------------------
TRANSPOSE(G)
    let G' be the transpose of G and G'.Adj[] is the size of G
    for i = 1 up to |G.V|
        let temp be a new node at G.Adj[i]
        while temp != NULL
            if G'.Adj[temp.vertex] == NULL
                let transpose be a new node to insert into the adjacency list
                transpose.vertex = i
                transpose.next = NULL
                G'.Adj[temp.vertex] = transpose
            else
                let transpose be a new node
                transpose.vertex = i
                transpose.next = G'.Adj[temp.vertex]
                G'.Adj[temp.vertex] = transpose
            temp = temp.next
