//***********************************************
// Dynamic Programming notes
//***********************************************

- Dynamic programming is similar to divide and conquer in that problems are made into smaller problems, and then combining the solutions of those smaller problems.
    - When dividing and conquering problems, however, there may be overlap between subproblems, in other words, subproblems share subproblems.
    - A dynamic-programming algorithm solves each subsubproblem just once and then saves its answer in a table, thereby avoiding the work of recomputing the answer every time it solves each subsubproblem.

- We typically apply dynamic programming to optimization problems, like getting a max profit/value or minimizing cost.

- When developing a dynamic-programming algorithm, we follow a sequence of four steps:
    1. Characterize the structure of an optimal solution.
    2. Recursively define the value of an optimal solution.
    3. Compute the value of an optimal solution, typically in a bottom-up fashion.
        - at this point we have the value of an optimal solution, not the solution itself (that is what step 4 is for)
    4. Construct an optimal solution from computed information.

    Obviously, do not start coding right away; ponder the problem, look at patterns, work out some math, then redo it in a more organized way, then work out pseudo code, trace that pseudo code, and then write code once you know (more or less at least) will work.
