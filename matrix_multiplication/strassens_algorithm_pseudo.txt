//***********************************************
 Strassen's method for matrix multiplication.
//***********************************************

Given matrices A and B of dimensions n * n.

The goal of Strassen's method is to reduce the number of
multiplications to 7.
This method also multiplies two n * n  matrices.
- Note: If either matrix is not square, then pad the row and/or column with zeros to get square dimensions.

Then A and B can be calculated with the below seven submatrices 
(of size n/2).

    p1 = a(f - h)
    p2 = (a + b)h
    p3 = (c + d)e
    p4 = d(g - e)
    p5 = (a + d)(e + h)
    p6 = (b - d)(g + h)
    p7 = (a - c)(e + f)
    
C is the result of

    A           B                     C

  a   b   *   e   f   =  (p5+p4-p2+p6)    (p1+p2)
  c   d       g   h        (p3 + p4)   (p1+p5-p3-p7)

This procudes a run time (n^(log2(7))) that is better than the running time of naive matrix multiplication (n^3).
But Strassen's algorithm is not used for practical applications.
The idea of understanding Strassen's algorithm is to understand how to break down a slow process like naive matrix multiplication, and take steps to better the effeciency.

For Strassen's algorithm, consider the square matrices A, B, and C.

    A = | A11 A12 |     B = | B11 B12 |     C = | C11 C12 |
        | A21 A22 |         | B21 B22 |         | C12 C22 |

//===============================================
 Pseudo code for Strassen's algorithm.
//===============================================
STRASSEN(A, B)
    n = A.rows
    let C be a new matrix
    
    // Base case
    if n == 1
        C[1, 1] = A[1, 1] * B[1, 1]
    
    else
        partition A and B into equations
        let C[1, 1], C[1, 2],
            C[2, 1], and C[2, 2] be n/2 * n/2 matrices
        create n/2 * n/2 matrices S[1], S[2],..., S[10]
        create n/2 * n/2 matrices P[1], P[2],..., P[7]
        
        S[1] = B[1, 2] - B[2, 2]
        S[2] = A[1, 1] + A[1, 2]
        S[3] = A[2, 1] + A[2, 2]
        S[4] = B[2, 1] - B[1, 1]
        S[5] = A[1, 1] + A[2, 2]
        S[6] = B[1, 1] + B[2, 2]
        S[7] = A[1, 2] - A[2, 2]
        S[8] = A[2, 1] - B[2, 2]
        S[9] = A[1, 1] - A[2, 1]
        S[10] = B[1, 1] + B[1, 2]
        
        P[1] = STRASSEN(A[1, 1], S[1])
        P[2] = STRASSEN(S[2], B[2, 2])
        P[3] = STRASSEN(S[3], B[1, 1])
        P[4] = STRASSEN(A[2, 2], S[4])
        P[5] = STRASSEN(S[5], S[6])
        P[6] = STRASSEN(S[7], S[8])
        P[7] = STRASSEN(S[9], S[10])
        
        C[1, 1] = P[5] + P[4] - P[2] + P[6]
        C[1, 2] = P[1] + P[2]
        C[2, 1] = P[3] + P[4]
        C[2, 2] = P[5] + P[1] - P[3] - P[7]
        
        combine C[1, 1], C[1, 2], C[2, 1], C[2, 2] into C
    return C
