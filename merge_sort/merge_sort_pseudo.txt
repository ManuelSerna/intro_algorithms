//***********************************************
 Merge sort algorithm.
//***********************************************

#DEFINE A   // array with n elements
#DEFINE p   // left-most element in A
#DEFINE r   // right-most element in A

//-----------------------------------------------
 Divide until recursion bottoms out to subarray of one element.
//-----------------------------------------------
MERGE_SORT(A, p, r)
    if p < r
        mid = floor((p + r) / 2)
        MERGE_SORT(A, p, q)     // left subarray
        MERGE_SORT(A, q+1, r)   // right subarray
        MERGE(A, p, q, r)       // combine subarrays


//-----------------------------------------------
 Merge subarrays.
//-----------------------------------------------
MERGE(A, p, q, r)
    n1 = q - p + 1
    n2 = r - q
    
    let L[1...n1] be a new array
    let R[1...n2] be a new array
    
    for i = 1 to n1
        L[i] = A[p + i - 1]
    for j = 1 to n2
        R[j] = A[q + j]
    
    i = 1
    j = 1
    
    for k = p to r
        if i > n1
            A[k] = R[j]
            j = j + 1
        else if j > n2
            A[k] = L[i]
            i = i + 1
        else if L[i] <= R[j]
            A[k] = L[i]
            i = i + 1
        else
            A[k] = R[j]
            j = j + 1
